install.package("rtweet")
install.packages("rtwet")
install.packages("rtweet")
get_token() #connect to twitter API
library(rtweet)
library(tidyverse)
library(here)
install.packages("here")
install.packages("lubridate")
install.packages("igraph")
library(rtweet)
library(tidyverse)
library(here)
library(lubridate)
library(igraph)
library(httr)
get_token() #connect to twitter API
dz = rnorm(0,1)
dz = rnorm(1,0,1)
dz = rnorm(1,0,1)
dz = rnorm(1,0,1)
dz = rnorm(1,0,1)
set.seed(12345)
K = .6
S = 2
Sl = 1
sigma = .2
dT = .1
dz = rnorm(1,0,1)
dz = rnorm(1,0,1)
dG <- ((K/S)*(Sl-S) - (sigma**2)/(2*sigma))dT + ((sigma*(S**.5))/S)dZ
2**@
2**2
9**.5
dG <- ((K/S)*(Sl-S) - (sigma**2)/(2*S))dT + ((sigma*(S**.5))/S)dZ
K = .6
S = 2
Sl = 1
sigma = .2
dT = .1
dz = rnorm(1,0,1)
dG <- ((K/S)*(Sl-S) - (sigma**2)/(2*S))dT + ((sigma*(S**.5))/S)dZ
K = .6
S = 1
Sl = 2
sigma = .2
dT = .1
dz = rnorm(1,0,1)
dG <- ((K/S)*(Sl-S) - (sigma**2)/(2*S))dT + ((sigma*(S**.5))/S)dZ
dG <- ((K/S)*(Sl-S) - (sigma**2)/(2*S))*dT + ((sigma*(S**.5))/S)*dZ
dz = rnorm(1,0,1)
dG <- ((K/S)*(Sl-S) - (sigma**2)/(2*S))*dT + ((sigma*(S**.5))/S)*dZ
dZ = rnorm(1,0,1)
dG <- ((K/S)*(Sl-S) - (sigma**2)/(2*S))*dT + ((sigma*(S**.5))/S)*dZ
dGs <- rep(0, 10000)
for(i in 1:10000){
dG <- ((K/S)*(Sl-S) - (sigma**2)/(2*S))*dT + ((sigma*(S**.5))/S)*dZ
dGs[i] <- dG
}
dGs <- as.data.frame(dGs)
View(dGs)
for(i in 1:10000){
dZ = rnorm(1,0,1)
dG <- ((K/S)*(Sl-S) - (sigma**2)/(2*S))*dT + ((sigma*(S**.5))/S)*dZ
dGs[i] <- dG
}
dGs <- as.data.frame(dGs)
View(dGs)
View(dGs)
View(dGs)
dGs <- rep(0, 10000)
dGs <- as.data.frame(dGs)
View(dGs)
for(i in 1:10000){
dZ = rnorm(1,0,1)
dG <- ((K/S)*(Sl-S) - (sigma**2)/(2*S))*dT + ((sigma*(S**.5))/S)*dZ
dGs[,i] <- dG
}
for(i in 1:10000){
dZ = rnorm(1,0,1)
dG <- ((K/S)*(Sl-S) - (sigma**2)/(2*S))*dT + ((sigma*(S**.5))/S)*dZ
dGs[i,] <- dG
}
dGs <- rep(0, 10000)
dGs <- as.data.frame(dGs)
for(i in 1:1000){
dZ = rnorm(1,0,1)
dG <- ((K/S)*(Sl-S) - (sigma**2)/(2*S))*dT + ((sigma*(S**.5))/S)*dZ
dGs[i,] <- dG
}
View(dGs)
Sl = 10
sigma = .2
dT = .1
dGs <- rep(0, 10000)
dGs <- as.data.frame(dGs)
for(i in 1:1000){
dZ = rnorm(1,0,1)
dG <- ((K/S)*(Sl-S) - (sigma**2)/(2*S))*dT + ((sigma*(S**.5))/S)*dZ
dGs[i,] <- dG
}
Sl = 2
sigma = .2
dT = .1
dGs <- rep(0, 10000)
dGs <- as.data.frame(dGs)
for(i in 1:1000){
dZ = rnorm(1,0,1)
dG <- ((K/S)*(Sl-S) - (sigma**2)/(2*S))*dT + ((sigma*(S**.5))/S)*dZ
dGs[i,] <- dG
}
mean(dGs)
mean(dGs$dGs)
Sl = 1.1
sigma = .2
dT = .1
dGs <- rep(0, 10000)
dGs <- as.data.frame(dGs)
for(i in 1:1000){
dZ = rnorm(1,0,1)
dG <- ((K/S)*(Sl-S) - (sigma**2)/(2*S))*dT + ((sigma*(S**.5))/S)*dZ
dGs[i,] <- dG
}
mean(dGs$dGs)
Sl = .9
sigma = .2
dT = .1
dGs <- rep(0, 10000)
dGs <- as.data.frame(dGs)
for(i in 1:1000){
dZ = rnorm(1,0,1)
dG <- ((K/S)*(Sl-S) - (sigma**2)/(2*S))*dT + ((sigma*(S**.5))/S)*dZ
dGs[i,] <- dG
}
mean(dGs$dGs)
Sl = 2
sigma = .2
dT = .1
dGs <- rep(0, 10000)
dGs <- as.data.frame(dGs)
for(i in 1:1000){
dZ = rnorm(1,0,1)
dG <- ((K/S)*(Sl-S) - (sigma**2)/(2*S))*dT + ((sigma*(S**.5))/S)*dZ
dGs[i,] <- dG
}
mean(dGs$dGs)
#EFIN 401 Take home test prob 3c
So <- 250000
mus <- .08
sigmas <- .25
mub <- .05
sigmab <- .075
T = 20
EVS <- log(So) + (mus - (sigmas**2)/2)*T
SDS <- (sigmas**2)*T
EVS <- exp(log(So) + (mus - (sigmas**2)/2)*T)
SDS <- exp((sigmas**2)*T)
EVB <- exp(log(So) + (mub - (sigmab**2)/2)*T)
SDB <- exp((sigmab**2)*T)
dist <- seq(0,1,.01)
EVS <- function(){
exp(log(So) + (mus - (sigmas**2)/2)*T)
}
V <- matrix(0,100,2)
View(V)
colnames(V) <- c("EV", "SD")
for(i in dist){
S <- dist
B <- 1-dist
EV <- S*EVS + B*EVB
ESD <- S*SDS + B*SDB
V$EV[,i] <- EV
V$SD[,i] <- ESD
}
S <- dist
B <- 1-dist
EV <- S*EVS + B*EVB
for(i in dist){
S <- dist[i]
B <- 1-dist[i]
EV <- S*EVS + B*EVB
ESD <- S*SDS + B*SDB
V$EV[,i] <- EV
V$SD[,i] <- ESD
}
View(V)
S <- dist[i]
dist[1]
for(i in dist){
S <- dist[i]
B <- 1-dist[i]
EV <- S*EVS + B*EVB
ESD <- S*SDS + B*SDB
V$EV[,i] <- EV
V$SD[,i] <- ESD
}
for(i in 1:100){
S <- dist[i]
B <- 1-dist[i]
EV <- S*EVS + B*EVB
ESD <- S*SDS + B*SDB
V$EV[,i] <- EV
V$SD[,i] <- ESD
}
S <- dist[i]
B <- 1-dist[i]
EV <- S*EVS + B*EVB
EVS <- exp(log(So) + (mus - (sigmas**2)/2)*T)
SDS <- exp((sigmas**2)*T)
EVB <- exp(log(So) + (mub - (sigmab**2)/2)*T)
SDB <- exp((sigmab**2)*T)
for(i in 1:100){
S <- dist[i]
B <- 1-dist[i]
EV <- S*EVS + B*EVB
ESD <- S*SDS + B*SDB
V$EV[,i] <- EV
V$SD[,i] <- ESD
}
S <- dist[i]
B <- 1-dist[i]
EV <- S*EVS + B*EVB
ESD <- S*SDS + B*SDB
V$EV[,1]
V$EV[1,]
V$EV
V <- as.data.frame(matrix(0,100,2))
colnames(V) <- c("EV", "SD")
V$EV
V$EV[,1]
V$EV[1,]
V[,1]
V[1,]
V[1,] = c(1,2)
V[1,]
for(i in 1:100){
S <- dist[i]
B <- 1-dist[i]
EV <- S*EVS + B*EVB
ESD <- S*SDS + B*SDB
V[i,] <- c(EV, ESD)
}
plot(V$EV, V$SD)
rho <- .3
for(i in 1:100){
S <- dist[i]
B <- 1-dist[i]
EV <- S*EVS + B*EVB
SD <- sd(S,B,sigmas,sigmab,rho)
V[i,] <- c(EV, SD)
}
sd(.05,.95,sigmas,sigmab,rho)
sd <- function(w1,w2,sigma1,sigma2,rho){
sd <- ((w1**2)*(sigma1**2)+(w2**2)*(sigma2**2)+(2*rho*w1*w2*sigma1*sigma2))**.5
return(sd)
}
sd(.05,.95,sigmas,sigmab,rho)
for(i in 1:100){
S <- dist[i]
B <- 1-dist[i]
EV <- S*EVS + B*EVB
SD <- sd(S,B,sigmas,sigmab,rho)
V[i,] <- c(EV, SD)
}
View(V)
plot(V$EV, V$SD)
plot(V$SD, V$EV)
#asset 1:
mu1 <- .08
sigma1 <- .14
mu2 <- .12
sigma2 <-  .20
rho <- .3
sd <- function(w1,w2,sigma1,sigma2,rho){
sd <- ((w1**2)*(sigma1**2)+(w2**2)*(sigma2**2)+(2*rho*w1*w2*sigma1*sigma2))**.5
return(sd)
}
col1 <- seq(0,1,.1)
col2 <- seq(1,0,-.1)
col3 <- rep(0,11)
col4 <- rep(0,11)
for(i in 1:11){
col3[i] <- mu1*col1[i] + mu2*col2[i]
col4[i] <- sd(col1[i], col2[i], sigma1, sigma2, rho)
}
V <- matrix(
c(col1, col2, col3, col4),
ncol = 4,
)
plot(V[,4], V[,3],
xlim = c(.07,.25),
ylim = c(.03, .17),
xlab = "standard deviation",
ylab = "expected return")
#EFIN 401 Take home test prob 3c
So <- 250000
T = 20
rho <- .3
mus <- .08
sigmas <- .25
mub <- .05
sigmab <- .075
EVS <- exp(log(So) + (mus - (sigmas**2)/2)*T)
SDS <- exp((sigmas**2)*T)
EVB <- exp(log(So) + (mub - (sigmab**2)/2)*T)
SDB <- exp((sigmab**2)*T)
dist <- seq(0,1,.01)
dist[1]
V <- as.data.frame(matrix(0,100,2))
colnames(V) <- c("EV", "SD")
sd <- function(w1,w2,sigma1,sigma2,rho){
sd <- ((w1**2)*(sigma1**2)+(w2**2)*(sigma2**2)+(2*rho*w1*w2*sigma1*sigma2))**.5
return(sd)
}
for(i in 1:100){
S <- dist[i]
B <- 1-dist[i]
EV <- S*EVS + B*EVB
SD <- sd(S,B,sigmas,sigmab,rho)
V[i,] <- c(EV, SD)
}
plot(V$SD, V$EV)
rho <- .8
for(i in 1:100){
S <- dist[i]
B <- 1-dist[i]
EV <- S*EVS + B*EVB
SD <- sd(S,B,sigmas,sigmab,rho)
V[i,] <- c(EV, SD)
}
plot(V$SD, V$EV)
rho <- .1
for(i in 1:100){
S <- dist[i]
B <- 1-dist[i]
EV <- S*EVS + B*EVB
SD <- sd(S,B,sigmas,sigmab,rho)
V[i,] <- c(EV, SD)
}
plot(V$SD, V$EV)
rho <- -.3
for(i in 1:100){
S <- dist[i]
B <- 1-dist[i]
EV <- S*EVS + B*EVB
SD <- sd(S,B,sigmas,sigmab,rho)
V[i,] <- c(EV, SD)
}
plot(V$SD, V$EV)
So <- 250000
T = 20
rho <- -.3
mus <- .08
sigmas <- .25
mub <- .05
sigmab <- .075
EVS <- exp(log(So) + (mus - (sigmas**2)/2)*T)
SDS <- exp((sigmas**2)*T)
EVB <- exp(log(So) + (mub - (sigmab**2)/2)*T)
mub <- .05
sigmab <- .075
EVS <- exp(log(So) + (mus - (sigmas**2)/2)*T)
SDS <- exp((sigmas**2)*T)
EVB <- exp(log(So) + (mub - (sigmab**2)/2)*T)
plot(V$SD, V$EV, xlab = "Standard Deviation", ylab = "Expected Return")
getwd()
setwd("460-Project/ECNS_460_TopicData")
library(tidyverse)
health_ranking <- read.csv("Data/Cleaned Data/CountyHealthRank2018_2023.csv")
national_overdose_by_county <- read.csv("Data/Cleaned Data/NationalOverdoseDeathsByCounty_cleaned.csv")
oregon_overdose_by_county <- read.csv("Data/Cleaned Data/OregonOverdoseDeathsByCounty2020_2023.csv")
oregon_violent_crime <- read.csv("Data/Cleaned Data/OregonViolentCrime2012_2022.csv")
overdose_by_drug <- read.csv("Data/Cleaned Data/OverDosebyDrug_cleaned.csv")
overdose_by_drug <- read.csv("Data/Cleaned Data/OregonMergedCountyData.csv")
View(oregon_violent_crime)
View(health_ranking)
overdose_by_drug <- read.csv("Data/Cleaned Data/OverDosebyDrug_cleaned.csv")
oregon_merged_data <- read.csv("Data/Cleaned Data/OregonMergedCountyData.csv")
View(oregon_merged_data)
# Replace NA in county column with state_year
na_count <- sum(is.na(county_health_rank_2018_2023$county))
print(na_count)
View(oregon_violent_crime)
violent_crime <- read.csv("Data/Cleaned Data/ViolentCrime.csv")
violent_crime <- read.csv("Data/Cleaned Data/ViolentCrime.csv")
health_ranking <- read.csv("Data/Cleaned Data/CountyHealthRank2018_2023.csv")
national_overdose_by_county <- read.csv("Data/Cleaned Data/NationalOverdoseDeathsByCounty_cleaned.csv")
oregon_overdose_by_county <- read.csv("Data/Cleaned Data/OregonOverdoseDeathsByCounty2020_2023.csv")
violent_crime <- read.csv("Data/Cleaned Data/ViolentCrime.csv")
overdose_by_drug <- read.csv("Data/Cleaned Data/OverDosebyDrug_cleaned.csv")
oregon_merged_data <- read.csv("Data/Cleaned Data/OregonMergedCountyData.csv")
#Load in functions (Currently none in Functions)
source("Code/Functions.R")
library(tidyverse)
#Start with Oregon Violent Crime:
ggplot_hist(violent_crime, violent_crime$USA)
#Load in functions (Currently none in Functions)
source("Code/Functions.R")
#GGplot histogram
func <- ggplot_hist(df, x){
#GGplot histogram
ggplot_hist <- function(df,x){
return(ggplot(df, aes(x = x))+
geom_histogram()
)
}
#Load in functions (Currently none in Functions)
source("Code/Functions.R")
#Start with Oregon Violent Crime:
ggplot_hist(violent_crime, violent_crime$USA)
ggplot_hist(violent_crime, violent_crime$Oregon)
ggplot(violent_crime, aes(x = violent_crime$USA))+
geom_histogram()
ggplot(violent_crime, aes(x = USA))+
geom_histogram()
ggplot_bar <- function(df,x,y){
return(ggplot(df, aes(x=x,y=y))+
geom_bar())
}
ggplot_bar <- function(df,x,y){
return(ggplot(df, aes(x=df$x,y=df$y))+
geom_bar())
}
#Start with Oregon Violent Crime:
ggplot_bar(violent_crime, Year, Value)
ggplot_bar <- function(df,x,y){
return(ggplot(df, aes(x=df$x,y=df$y))+
geom_bar())
}
#Start with Oregon Violent Crime:
ggplot_bar(violent_crime, Year, Value)
#Load in functions (Currently none in Functions)
source("Code/Functions.R")
#Start with Oregon Violent Crime:
ggplot_bar(violent_crime, Year, Value)
View(violent_crime)
#Start with Oregon Violent Crime:
ggplot(violent_crime, aes(x = Year, y = USA))+
geom_bar()
#Start with Oregon Violent Crime:
ggplot(violent_crime, aes(x = Year, y = USA))+
geom_bar(stat = "identity")
ggplot_bar(violent_crime, Year, USA)
#Load in functions (Currently none in Functions)
source("Code/Functions.R")
ggplot_bar(violent_crime, Year, USA)
ggplot_bar(violent_crime, Year, USA)
#Start with Oregon Violent Crime:
ggplot(violent_crime, aes(x = Year, y = USA))+
geom_bar(stat = "identity")
ggplot(violent_crime, aes(x = Year, y = Oregon))+
geom_bar(stat = "identity")
View(overdose_by_drug)
#Overdose by drug-
#Start with U.S
USOverdose_by_drug <- overdose_by_drug[overdose_by_drug$st_abbrev == "US"]
#Overdose by drug-
#Start with U.S
USOverdose_by_drug <- overdose_by_drug[overdose_by_drug$st_abbrev == "US",]
View(USOverdose_by_drug)
OROverdose_by_drug <- overdose_by_drug[overdose_by_drug$st_abbrev == "OR",]
View(OROverdose_by_drug)
ggplot(USOverdose_by_drug, aes(x = start_year, y = all_percentagechange))+
geom_point()
ggplot(USOverdose_by_drug, aes(x = start_year, y = all_percentagechange))+
geom_smooth()
ggplot(USOverdose_by_drug, aes(x = start_year, y = all_percentagechange))+
geom_point()
ggplot(ORoverdose_by_drug, aes(x = start_year, y = all_percentagechange))+
geom_point()
ggplot(OROverdose_by_drug, aes(x = start_year, y = all_percentagechange))+
geom_point()
#*****************FIX Y AXIS******************
ggplot(USOverdose_by_drug, aes(x = start_year, y = all_percentagechange))+
geom_point()
#*****************FIX Y AXIS******************
ggplot(USOverdose_by_drug, aes(x = start_year, y = all_percentagechange))+
geom_smooth()
table(USOverdose_by_drug$all_issignificant)
table(OROverdose_by_drug$all_issignificant)
View(oregon_overdose_by_county)
View(oregon_overdose_by_county)
oregon_overdose_deaths_by_county <- read.csv("Data/Cleaned Data/OregonOverdoseDeathsByCounty2020_2023.csv")
View(OROverdose_by_drug)
View(oregon_overdose_by_county)
View(oregon_overdose_by_county)
View(oregon_merged_data)
View(national_overdose_by_county)
View(national_overdose_by_county)
sum(is.na(national_overdose_by_county$provisional_drug_overdose_deaths))
sum(national_overdose_by_county$provisional_drug_overdose_deaths == "")
sum(national_overdose_by_county$provisional_drug_overdose_deaths == "")/nrow(national_overdose_by_county)
View(health_ranking)
plot(health_ranking$yrs_potential_life_lost_rate)
plot(health_ranking$yrs_potential_life_lost_rate)
plot(health_ranking$yrs_potential_life_lost_rate)
plot(health_ranking$percent_fair_poor_health)
plot(health_ranking$phys_unhealthy_days)
plot(health_ranking$mentally_unhealthy_days)
plot(health_ranking$preventable_hosp_rate)
plot(health_ranking$percent_smokers)
plot(health_ranking$percent_smokers)
plot(health_ranking$low_birthweight)
plot(health_ranking$excessive_drinking)
plot(health_ranking$mental_health_providers)
plot(health_ranking$percent_unemployed)
plot(health_ranking$violent_crime_rate)
plot(health_ranking$income_ratio)
plot(health_ranking$percent_child_poverty)
plot(health_ranking$preventable_hosp_rate) #LOOKs increasing
plot(health_ranking$preventable_hosp_rate) #LOOKs increasing
plot(health_ranking$mentally_unhealthy_days)
